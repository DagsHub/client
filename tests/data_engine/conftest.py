import datetime

import pytest

from dagshub.common.api import UserAPI
from dagshub.common.api.responses import UserAPIResponse
from dagshub.data_engine import datasources
from dagshub.data_engine.client.models import MetadataSelectFieldSchema
from dagshub.data_engine.model.datapoint import Datapoint
from dagshub.data_engine.model.datasource import Datasource, DatasetState
from dagshub.data_engine.model.query_result import QueryResult
from dagshub.data_engine.model.schema_util import metadata_type_lookup
from tests.data_engine.util import add_string_fields
from tests.mocks.repo_api import MockRepoAPI


@pytest.fixture
def ds(mocker, mock_dagshub_auth) -> Datasource:
    return _create_mock_datasource(mocker, 1, "test-dataset")


@pytest.fixture
def other_ds(mocker, mock_dagshub_auth) -> Datasource:
    return _create_mock_datasource(mocker, 2, "other-dataset")


def _create_mock_datasource(mocker, id, name) -> Datasource:
    ds_state = datasources.DatasourceState(id=id, name=name, repo="kirill/repo")
    ds_state.path = "repo://kirill/repo/data/"
    mocker.patch.object(ds_state, "client")
    # Stub out get_from_dagshub, because it doesn't need to be done in tests
    mocker.patch.object(ds_state, "get_from_dagshub")
    # Stub out
    mocker.patch.object(ds_state, "_root_path", return_value="http://example.com")
    ds_state.repoApi = MockRepoAPI("kirill/repo")
    return Datasource(ds_state)


@pytest.fixture
def dataset_state(ds) -> DatasetState:
    add_string_fields(ds, "dataset_field")
    queried = ds["dataset_field"] == "aaa"

    state = DatasetState.from_dataset_query(
        dataset_id=100,
        dataset_name="dataset-name",
        datasource_id=ds.source.id,
        dataset_query=queried.serialize_gql_query_input(),
    )
    return state


@pytest.fixture
def ds_with_dataset(ds, dataset_state) -> Datasource:
    ds.load_from_dataset_state(dataset_state)
    return ds


@pytest.fixture
def some_datapoints(ds):
    dps = []
    for i in range(5):
        dp = Datapoint(datasource=ds, path=f"dp_{i}", datapoint_id=i, metadata={})
        for j in range(5):
            dp.metadata[f"col{j}"] = i
        dps.append(dp)
    return dps


@pytest.fixture
def some_datapoint(some_datapoints):
    return some_datapoints[0]


@pytest.fixture
def query_result(ds, some_datapoints):
    fields = []
    # Assuming that all dps have the same metadata fields
    dp = some_datapoints[0]
    for k, v in dp.metadata.items():
        f = MetadataSelectFieldSchema(
            asOf=int(datetime.datetime.now().timestamp()),
            autoGenerated=False,
            originalName=k,
            multiple=False,
            valueType=metadata_type_lookup[type(v)],
            name=k,
            tags=None,
        )
        fields.append(f)
    qr = QueryResult(datasource=ds, _entries=some_datapoints, fields=fields)
    return qr


@pytest.fixture
def mock_dagshub_auth(mocker):
    mock_user = UserAPIResponse(
        id=0,
        login="test_user",
        full_name="test_user_name",
        username="test_login",
        avatar_url=None,
        public_email=None,
        website=None,
        company=None,
        description=None,
    )

    mocker.patch(
        "dagshub.auth.tokens.TokenStorage.get_username_of_token",
        return_value={"username": mock_user.username, "login": mock_user.login},
    )

    mocker.patch(
        "dagshub.common.api.user.UserAPI.get_current_user",
        return_value=UserAPI(mock_user),
    )
